<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:jaxrs="http://cxf.apache.org/jaxrs"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
       http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
       http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd
       http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd"
       default-autowire="byName" >
    
    <!--    <context:property-placeholder 
    location="classpath:user-specific.properties"
    system-properties-mode="OVERRIDE"/>-->
        
    <bean id="placeholderConfigurer" parent="placeholderConfigurerParent">
        <property name="location" value="classpath:user-specific.properties"/>
    </bean>
    
    
    <bean class="com.objectbrains.hcms.spring.HcmsConfiguration"/>
    <!--    <bean class="com.objectbrains.hcms.spring.HcmsConfigManager">
        <property name="location">
            <value>classpath:user-specific.properties</value>
        </property>
    </bean>-->
    
    <import resource="base-context.xml"/>
    
    <!--<import resource="classpath:com/objectbrains/svc/spring/webservice-context.xml" />-->
    <import resource="classpath:com/objectbrains/ams/spring/webservice-context.xml" />
    
    <!--<jee:jndi-lookup id="dataSource" jndi-name="${db.dataSource}"/>-->
    
    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="org.postgresql.Driver" />
        <property name="url" value="jdbc:postgresql://localhost:5432/sti" />
        <property name="username" value="sti" />
        <property name="password" value="sti" />
        <property name="initialSize" value="20"/>
        <property name="maxTotal" value="50" />
        <property name="maxWaitMillis" value="1000" />
        <property name="testOnCreate" value="true" />
        <property name="testOnReturn" value="true" />
    </bean>
    
    <!--<import resource="classpath:META-INF/cxf/cxf.xml" />-->
    <!-- 
        Discover all root resources and providers in packages starting from "a.b.c" 
    -->
    <jaxrs:server address="/rest" basePackages="com.objectbrains.tms.restfull,com.objectbrains.tms.restfull.freeswitch">
        <jaxrs:providers>
            <ref bean="jacksonProvider"/>
            <bean class="com.objectbrains.tms.restfull.util.StringToCDRConverter"/>
        </jaxrs:providers>
    </jaxrs:server>
    
    <!--    <jaxrs:client address="http://127.0.0.1:7070/tms_local" basePackages="com.objectbrains.tms.restful.ows">
        <jaxrs:providers>
            <ref bean="jacksonProvider"/>
        </jaxrs:providers>
    </jaxrs:client>-->
    
    <bean id="jacksonProvider" class="com.fasterxml.jackson.jaxrs.json.JacksonJaxbJsonProvider" >
        <constructor-arg ref="objectMapper"/>
        <constructor-arg ref="providerAnnotations"/>
    </bean>
    
    <util:constant id="providerAnnotations"
                   static-field="com.fasterxml.jackson.jaxrs.json.JacksonJaxbJsonProvider.DEFAULT_ANNOTATIONS"/>
    
    
    <!--    <util:constant id="writeAsTimestampsFeature"
                   static-field="com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATES_AS_TIMESTAMPS"/>
    <util:constant id="failOnUnkownPropertiesFeature"
                   static-field="com.fasterxml.jackson.databind.DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES"/>
    Jackson - registerModule JodaModule 
    <bean id="objectMapper" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetObject">
            Jackson - objectMapper format date setting 
            <bean class="com.fasterxml.jackson.databind.ObjectMapper"
                  init-method="findAndRegisterModules">
                <property name="dateFormat">
                    <bean class="java.text.SimpleDateFormat">
                        <constructor-arg value="yyyy-MM-dd'T'HH:mm:ss.SSSZ"/>
                    </bean>
                </property>
            </bean>
        </property>
        <property name="targetMethod" value="disable"/>
        <property name="arguments">
            <list>
                <ref bean="writeAsTimestampsFeature"/>
                <value>false</value>
            </list>
        </property>
    </bean>-->
    
    
    <task:scheduler id="tms-scheduler" pool-size="10"/>
    <task:executor id="tms-quartz" pool-size="10"/>
    <task:executor id="tms-recordingUpload" pool-size="6" queue-capacity="24" rejection-policy="CALLER_RUNS"/>
    <task:executor id="tms-csvUpload" pool-size="10"/>
    <task:executor id="tms-dialer-call-batch" pool-size="20"/>
    <task:annotation-driven executor="tms-executor" scheduler="tms-scheduler"/>
    
    
    <!--<bean class="com.objectbrains.scheduler.annotation.DefaultSchedulerConfiguration"/>-->
    
    <bean class="com.objectbrains.scheduler.annotation.QuartzSchedulerConfiguration">
        <property name="quartzJobExecutor" ref="tms-quartz"/>
    </bean>
    <bean class="com.objectbrains.scheduler.annotation.RunOnceAnnotationBeanPostProcessor"/>
</beans>
